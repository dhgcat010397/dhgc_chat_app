rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  	// match /{document=**} {
  	// allow read, write: if true; // WARNING: UNSECURE! For testing only.
  	// }
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Restrict writes to own user document
      allow create, update, delete: if request.auth != null && 
                                   request.auth.uid == userId;
    }
  
    match /chatrooms/{chatroomId} {
        // Allow read, write if the user is a participant
        allow read, write: if request.auth != null && 
                     resource.data.participants.hasAny([request.auth.uid]);

        // Allow create only if the user is included in participants
        // Enforce exactly 2 participants when is 1-1 chats
        allow create: if (
          request.auth != null &&
          request.resource.data.participants.size() == 2 &&
          request.resource.data.participants.hasAny([request.auth.uid])
        );

        // Allow update only if:
        // - User is a participant, AND
        // - They are updating only allowed fields (e.g., lastMessage)
        allow update: if (
          // Allow updates if the user is an admin
          (resource.data.admins != null && resource.data.admins.hasAny([request.auth.uid])) ||
          // OR allow updates to lastMessage/lastMessageTime by any participant
          (resource.data.participants.hasAny([request.auth.uid]) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessage', 'lastMessageTime']))
        );      


        // Allow delete only for admins (if applicable)
        allow delete: if request.auth != null &&
                     (resource.data.admins != null && 
                      resource.data.admins.hasAny([request.auth.uid]));
                      
        match /messages/{messageId} {
          allow read: if request.auth != null;
          allow create: if request.auth != null && 
                        request.resource.data.senderId == request.auth.uid;
      }
    }
  }
}